---
title: "pca"
author: "Soni Brenda"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
Endothelial.genes <- c("PECAM1", "CDH5", "CLDN5","ENG", "PROCR",
                       "OCLN", "VWF","ICAM1")
```

```{r}
##---- general libraries ----####

library(ggplot2)
library(ggrepel)
library(reshape)
library(ggridges)
```


```{r}
##---- NE sample and group names ----####

samples = c("ID_1","ID_3","ID_5","ID_7","ID_9","ID_11","ID_13","ID_15","ID_17","ID_19","ID_21","ID_23","ID_25","ID_27","ID_29","ID_31","ID_33","ID_35","ID_37","ID_39","ID_41","ID_43","ID_45","ID_47","ID_49","ID_51","ID_53","ID_55","ID_57","ID_59","ID_61","ID_63","ID_65","ID_67","ID_69","ID_71","ID_73","ID_75","ID_77","ID_79","ID_81","ID_83","ID_85","ID_87","ID_89","ID_2","ID_4","ID_6","ID_8","ID_10","ID_12","ID_14","ID_16","ID_18","ID_20","ID_22","ID_24","ID_26","ID_28","ID_30","ID_32","ID_34","ID_36","ID_38","ID_40","ID_42","ID_44","ID_46","ID_48","ID_50","ID_52","ID_54","ID_56","ID_58","ID_60","ID_62","ID_64","ID_66","ID_68","ID_70","ID_72","ID_74","ID_76","ID_78","ID_80","ID_82","ID_84","ID_86","ID_88","ID_90")
sample_groups = c("CD31_NEG","CD31_POS")
sample_groups = factor(sample_groups, levels = sample_groups)
sample_groupings = c
sample_groupings = factor(sample_groupings, levels = sample_groups)
samples_by_sample_group = list(c("ID_1","ID_3","ID_5","ID_7","ID_9","ID_11","ID_13","ID_15","ID_17","ID_19","ID_21","ID_23","ID_25","ID_27","ID_29","ID_31","ID_33","ID_35","ID_37","ID_39","ID_41","ID_43","ID_45","ID_47","ID_49","ID_51","ID_53","ID_55","ID_57","ID_59","ID_61","ID_63","ID_65","ID_67","ID_69","ID_71","ID_73","ID_75","ID_77","ID_79","ID_81","ID_83","ID_85","ID_87","ID_89"),c("ID_2","ID_4","ID_6","ID_8","ID_10","ID_12","ID_14","ID_16","ID_18","ID_20","ID_22","ID_24","ID_26","ID_28","ID_30","ID_32","ID_34","ID_36","ID_38","ID_40","ID_42","ID_44","ID_46","ID_48","ID_50","ID_52","ID_54","ID_56","ID_58","ID_60","ID_62","ID_64","ID_66","ID_68","ID_70","ID_72","ID_74","ID_76","ID_78","ID_80","ID_82","ID_84","ID_86","ID_88","ID_90"))
sample_groups_by_SS_column = list(c("CD31_NEG","CD31_POS"))
sample_groupings_by_SS_column = list(c
sample_sheet_column_names = c("sample_group")
```


```{r}
##---- sets the working directory. If you move the SL2 folder please update this path ----####

setwd("C:/Users/bmk27e/OneDrive - University of Glasgow/Desktop/GEOMX/Brenda_GEOmx_2023/analysis/mask/all_genes/ne_workflow")

##---- ne input files ----####

ne_file = read.table(file="data/ne_matrix_symbols.csv", header=TRUE,row.names = 1, sep='\t', quote='',check.names = TRUE)

##---- parse ne matrix ----####

ne_matrix = ne_file[,samples]

##---- transpose and scale ne matrix across all SS columns ----####

ne_matrix_all_SS_columns = ne_matrix[,cbind(unlist(samples_by_sample_group))]
ne_matrix_all_SS_columns_transposed = data.frame(t(ne_matrix_all_SS_columns))
colnames(ne_matrix_all_SS_columns_transposed) = rownames(ne_matrix_all_SS_columns)

ne_matrix_all_SS_columns_scaled = data.frame(t(scale(t(ne_matrix_all_SS_columns))))
rownames(ne_matrix_all_SS_columns_scaled) = rownames(ne_matrix_all_SS_columns)
ne_matrix_all_SS_columns_scaled[do.call(cbind, lapply(ne_matrix_all_SS_columns_scaled, is.nan))] <- 0
ne_matrix_all_SS_columns_scaled = ne_matrix_all_SS_columns_scaled[is.finite(rowSums(ne_matrix_all_SS_columns_scaled)), ]

ne_matrix_all_SS_columns_scaled_transposed = data.frame(t(ne_matrix_all_SS_columns_scaled))
colnames(ne_matrix_all_SS_columns_scaled_transposed) = rownames(ne_matrix_all_SS_columns_scaled)

##---- SL2 Theme ----####

theme_SL2 <- function () {
   theme_bw() %+replace%
       theme(
   panel.grid = element_blank(),
           panel.background = element_blank(),
           panel.border = element_rect(colour = "black", fill=NA, linewidth=1),
           plot.background = element_blank(),
           legend.background = element_rect(fill="transparent", colour=NA),
           legend.key = element_rect(fill="transparent", colour=NA),
           plot.title = element_text(size = 20, margin = margin(b = 5), hjust = 0, vjust = 0.5, face = "bold"),
           title = element_text(size = 13, margin = margin(b = 5), hjust = 0, vjust = 0.5, face = "bold"),
           axis.text.y = element_text(size = 13, margin = margin(t = 5), hjust = 0.5, vjust = 1, face = "bold", colour = "black"),
           axis.text.x = element_text(size = 13, margin = margin(r = 5), hjust = 1, vjust = 0.5, face = "bold", colour = "black"),
           axis.title.y = element_text(size = 18, margin = margin(r = 10), angle = 90, hjust = 0.5, vjust = 0.5, face = "bold"),
           axis.title.x = element_text(size = 18, margin = margin(t = 10), hjust = 0.5, vjust = 1, face = "bold"),
           legend.text=element_text(size=10, face="bold"),
           legend.title=element_blank(),
           #legend.key.size=unit(1.5,"line"),
           #plot.margin=unit(c(0.4,0.4,0.4,0.4), "cm"),
           legend.margin = margin(0, 0, 0, 0)
       )
}

##----- Default GGplot Colours Function -----####

gg_color_hue <- function(n)
{
 # default colour blind palettes
 cblind_palette = c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499", "#44AA99", "#999933", "#882255", "#661100", "#6699CC", "#888888")

 # append ggplot colours if groups goes above colour blind palette length
 if (n <= length(cblind_palette))
 {
   return(cblind_palette[1:n])
 }
 else
 {
   nn = n - length(cblind_palette)
   hues = seq(15, 375, length = nn + 1)
   return(append(cblind_palette,hcl(h = hues, l = 65, c = 100)[1:nn]))
 }
}

##---- Default Sample and Sample Group Colours by SS Column ----####

number_of_sample_groups = length(sample_groups)
default_sample_group_colours = gg_color_hue(number_of_sample_groups)
default_sample_group_colours_by_SS_column = list(default_sample_group_colours[1:2])
default_samples_colours_by_SS_column = list(c(default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[1],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2],default_sample_group_colours[2]))
default_samples_colours = default_samples_colours_by_SS_column[1]

##---- Default Sample Group Labels  ----####

default_sample_group_labels = gsub("_"," ",c("CD31_NEG","CD31_POS")) # note: changing this won't change the order the groups appear on the plots. Merely what they are labelled as.

##---- Save Plot Function -----####

save_plot <- function(ggp,plot_height,plot_width,plot_path)
{
 png(plot_path, height=plot_height, width=plot_width, pointsize=5)
 print(ggp)
 dev.off()

 svg(gsub(".png", ".svg", plot_path), height=plot_height/90, width=plot_width/90)
 print(ggp)
 dev.off()

 # clears all devices - as a safety measure
 while (dev.cur()>1) dev.off()
}

##---- Top 10 Genes by Mean Expression Function ----####

get_top_10_genes_by_mean_expression <- function(index) {
 samples_in_sample_group = unlist(samples_by_sample_group[index])
 top_10_genes = row.names(head(ne_matrix[order(rowMeans(ne_matrix[,samples_in_sample_group]),decreasing=TRUE),],10))
 return(top_10_genes)
}

##---- Gene Expression Boxplot Function  ----####

make_gene_expression_boxplot <- function(e_matrix, gene, box_transparency, box_width, box_line_thickness, box_colours, sample_labels, jitter_dot_size, jitter_dot_colour, jitter_dot_width,x_axis_label, y_axis_label, legend_position)
{
 # parse data
 gene_data = data.frame(t(e_matrix[gene,]))
 names(gene_data) = "expression"

 # check for negative values
 if (min(gene_data$expression) < 0)
 {
   ymin = min(gene_data$expression) * 1.25
 }
 else
 {
   ymin = 0
 }

 # make the plot
 ggp = ggplot(gene_data, aes(x=sample_groupings, y=expression, fill=sample_groupings)) +
   geom_boxplot(width = box_width, alpha = box_transparency, size = box_line_thickness) +
   geom_jitter(size=jitter_dot_size, colour=jitter_dot_colour, width=jitter_dot_width, height=0, show.legend = FALSE) +
   scale_fill_manual(values=box_colours,labels=sample_labels) +
   scale_x_discrete(labels=sample_labels) +
   ylim(ymin, max(gene_data) * 1.25) +
   labs(x=x_axis_label, y=y_axis_label, title= gene) +
   theme_SL2() +
   theme(legend.position=legend_position, axis.text.x = element_text(angle = 45, hjust = 1))

 return(ggp)
}

##---- Most Expressed Genes (Boxplots) ----####

plot_height = 350
plot_width = 300
box_transparency = 0.75
box_width = 0.75
box_line_thickness = 0.5
box_colours = default_sample_group_colours # note: changing this won't change the order the groups appear in the x axis. Merely what they are coloured as.
sample_labels = default_sample_group_labels # note: changing this won't change the order the groups appear in the x axis. Merely what they are named as.
jitter_dot_size = 2
jitter_dot_colour = "black"
jitter_dot_width = 0.2
x_axis_label = ""
y_axis_label = "expression"
legend_position = "none"

for(sample_group_index in 1:length(sample_groups))
{
 sample_group = sample_groups[sample_group_index]
 top_10_genes = get_top_10_genes_by_mean_expression(sample_group_index)

```


```{r}

## ---- Do some manipulation to get the endothelial genes
for (gene_index in 1:9)
 {
   gene = Endothelial.genes[gene_index]
   ggp = make_gene_expression_boxplot(ne_matrix, gene, box_transparency, box_width, box_line_thickness, box_colours, sample_labels, jitter_dot_size, jitter_dot_colour, jitter_dot_width,x_axis_label, y_axis_label, legend_position)
   save_plot(ggp,plot_height,plot_width,paste(sample_group,"_no.",gene_index,"endothelial.png",sep=""))

print(ggp)
 }
```
